#! /usr/bin/env python

import argparse
import cPickle
import errno
import json
import logging
import logging.handlers
import os
import sys
import socket

from multiprocessing import Queue, Process, Event
from multiprocessing.managers import SyncManager
from otorderd_logd import (initialize_queue_logger, get_formatter,
                           daemon_is_running)
from rankomatic import app
from rankomatic.util import get_dset
from rankomatic.worker_jobs import (_calculate_entailments,
                                    _make_grammar_info,
                                    _calculate_grammars_and_statistics)

GRAMS_PER_PAGE = 20
MAX_CONSTRAINTS = 6
DEFAULT_NUM_CONSTRAINTS = 5
DEFAULT_NUM_WORKERS = 5

ADDRESS = app.config['WORKER_ADDRESS']


START = "start"
STOP = "stop"
RESTART = "restart"
OPTIONS = [START, STOP, RESTART]

def set_log_level(level, log):
    if not level:
        log.setLevel(logging.CRITICAL)
    elif level == 1:
        log.setLevel(logging.WARNING)
    elif level == 2:
        log.setLevel(logging.INFO)
    else:
        log.setLevel(logging.DEBUG)


def configure_stderr_output(args, print_logger):
    handler = logging.StreamHandler()
    print_logger.addHandler(handler)
    print_logger.propagate = False
    set_log_level(args.verbosity, print_logger)


def configure_logging(args, queue_logger, print_logger):
    initialize_queue_logger()
    set_log_level(args.loglevel, queue_logger)
    configure_stderr_output(args, print_logger)


def get_args(queue_logger, print_logger):
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "cmd", choices=OPTIONS,
        help="stop, start, or restart the otorderd process"
    )
    parser.add_argument(
        "-v", action='count', dest='verbosity', default=2,
        help="set output verbosity. Increase by adding more 'v's to the short "
        "form -- -vvv corresponds to verbosity level 3. Default value is 2."
    )
    parser.add_argument(
        "--verbosity", choices=[0, 1, 2, 3], type=int, default=0
    )
    parser.add_argument(
        "-l", "--loglevel", choices=[0, 1, 2, 3], type=int, default=3,
        help="set logging level, 0-3, corresponding to critical, warning, "
        "info, and debug respectively. This is separate from "
        "printed output, and is written to a socket log. Default value is 3"
    )
    parser.add_argument(
        "-w", "--num-workers", choices=range(1, 11), type=int,
        help="set the number of worker processes to spawn, default is 5"
    )
    parser.add_argument(
        "-c", "--num-constraints", choices=range(3, MAX_CONSTRAINTS+1),
        type=int, help="set the max number of constraints that the "
        "workers can process. Increasing this corresponds to much "
        "higher memory usage. Default is 5."
    )
    args = parser.parse_args()
    configure_logging(args, queue_logger, print_logger)
    return args


logger = logging.getLogger("otorderd")
printer = logging.getLogger("stderr")
args = get_args(logger, printer)
job_queue = Queue()
control_queue = Queue()

def log_info(msg):
    logger.info(msg)
    printer.info(msg)


def log_debug(msg):
    logger.debug(msg)
    printer.debug(msg)


def exit(msg="unknown error", status=1):
    logger.critical("otorderd: %s", msg)
    print "otorderd: %s" % msg
    sys.exit(status)


def address_is_busy():
    return daemon_is_running(address=ADDRESS)


def load_lattice(num_constraints):
    with open('lattices/gspace_%dcons.p' % num_constraints) as f:
        lat = cPickle.load(f)
    msg =  "%d-constraint lattice loaded" % num_constraints
    log_debug(msg)
    return lat


if args.cmd == START:
    if not address_is_busy():
        if args.num_constraints:
            num_constraints = args.num_constraints
        else:
            num_constraints = DEFAULT_NUM_CONSTRAINTS
        msg = "loading lattices 3-{}".format(num_constraints)
        log_info(msg)
        lattices = [load_lattice(i) for i in xrange(3, num_constraints + 1)]

def get_fast_dset(dset_name, username):
    dset = get_dset(dset_name, username=username)
    index = dset.poot.set_n - 3
    dset.poot._mongo_db = None
    dset.poot._lattice = lattices[index]
    return dset


class QueueManager(SyncManager):
    pass


QueueManager.register('job_queue', callable=lambda: job_queue)
QueueManager.register('control_queue', callable=lambda: control_queue)


def queue_manager():
    return QueueManager(address=ADDRESS, authkey=app.config['SECRET_KEY'])


class OtorderDaemon(object):

    def __init__(self):
        self.exit = Event()
        self.manager = queue_manager()

    def start_manager(self):
        self.manager.start()
        msg = ("queue manager listening at: %s" % str(self.manager.address))
        log_info(msg)

    def _spawn_workers(self):
        if args.num_workers:
            num_workers = args.num_workers
        else:
            num_workers = DEFAULT_NUM_WORKERS
        self.workers = [Worker() for i in range(num_workers)]
        for worker in self.workers:
            worker.start()
        msg = "{} workers successfully spawned".format(num_workers)
        log_debug(msg)

    def run(self):
        self.job_queue = self.manager.job_queue()
        self.control_queue = self.manager.control_queue()
        self._spawn_workers()
        while not self.exit.is_set():
            msg = json.loads(self.control_queue.get())
            request = msg.pop('request')
            if request == "calculate":
                job_queue.put(json.dumps(msg))
            elif request == "command":
                self.perform_command(msg['command'])
            else:
                raise NameError('request %s not supported' % request)

    def perform_command(self, cmd):
        if cmd == "stop":
            self.stop()
            self.exit.set()
        elif cmd == "restart":
            self.restart()

    def stop(self):
        for worker in self.workers:
            job_queue.put(json.dumps({'func': 'stop'}))
        for worker in self.workers:
            worker.join()

    def restart(self):
        self.stop()
        self.manager.shutdown()
        log_info('restarting')
        filename = os.path.abspath(__file__)
        args = [sys.executable, filename, "start"]
        os.execl(sys.executable, *args)


class Worker(Process):

    def __init__(self, *args, **kwargs):
        super(Worker, self).__init__(*args, **kwargs)
        self.manager = queue_manager()
        self.exit = Event()

    def run(self):
        self.name = "Work-%d" % os.getpid()
        self.manager.connect()
        self.logger = logging.getLogger("otorderd.w%d" % os.getpid())
        msg = "worker starting"
        self.log_debug(msg)

        self.job_queue = self.manager.job_queue()
        while not self.exit.is_set():
            self.msg = json.loads(self.job_queue.get())
            self.run_calculation()

        msg = "Worker-%d shutting down" % os.getpid()
        self.log_debug(msg)

    def log_info(self, msg):
        self.logger.info(msg)
        printer.info(msg)

    def log_debug(self, msg):
        self.logger.debug(msg)
        printer.debug(msg)

    def shutdown(self):
        self.exit.set()

    def run_calculation(self):
        func = self.msg['func']
        if func == "calculate_grammars_and_statistics":
            target = _calculate_grammars_and_statistics
        elif func == "make_grammar_info":
            target = _make_grammar_info
        elif func == "calculate_entailments":
            target = _calculate_entailments
        elif func == "stop":
            target = None
            self.shutdown()
        else:
            raise NameError("desired function not found")

        if target:
            msg = "Worker-%d: %s(%s)" % (os.getpid(), func, self.msg['args'])
            self.log_info(msg)
            self.msg['args'].append(get_fast_dset)
            target(*self.msg['args'])


class Client(object):

    def __init__(self):
        self.manager = queue_manager()
        if address_is_busy():
            self.manager.connect()
            self.queue = self.manager.control_queue()

    def send_command(self, command):
        self.queue.put(json.dumps({
            'request': 'command',
            'command': command
        }))

    def start_daemon(self):
        if not address_is_busy():
            daemon = OtorderDaemon()
            daemon.start_manager()
            daemon.run()
        else:
            exit("daemon already running")

    def send_stop(self):
        if address_is_busy():
            self.send_command('stop')
        else:
            exit("no daemon running")

    def send_restart(self):
        if address_is_busy():
            self.send_command('restart')
        else:
            exit("no deameon running")



if __name__ == "__main__":
    client = Client()
    if args.cmd == START:
        client.start_daemon()
    elif args.cmd == STOP:
        client.send_stop()
    elif args.cmd == RESTART:
        client.send_restart()
